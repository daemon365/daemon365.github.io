<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Containerd-Shim on Daemon</title><link>https://daemon365.dev/tags/containerd-shim/</link><description>Recent content in Containerd-Shim on Daemon</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 09 May 2024 20:56:00 +0800</lastBuildDate><atom:link href="https://daemon365.dev/tags/containerd-shim/index.xml" rel="self" type="application/rss+xml"/><item><title>docker containerd runc containerd-shim等组件的关系</title><link>https://daemon365.dev/2024/05/09/docker-containerd-runc-containerd-shim%E7%AD%89%E7%BB%84%E4%BB%B6%E7%9A%84%E5%85%B3%E7%B3%BB/</link><pubDate>Thu, 09 May 2024 20:56:00 +0800</pubDate><guid>https://daemon365.dev/2024/05/09/docker-containerd-runc-containerd-shim%E7%AD%89%E7%BB%84%E4%BB%B6%E7%9A%84%E5%85%B3%E7%B3%BB/</guid><description>早期 kubelet 创建容器工作原理 因为 docker 出生的比 k8s 早，所以 k8s 早期的容器运行时都是基于 docker 的，kubelet 通过 docker 的 api 创建容器。后来，k8s 官方不想绑死在 docker 这架马车上，就把容器运行时抽象出来，定义了一个接口，叫 CRI (container runtime</description></item><item><title>容器启动流程（containerd 和 runc）</title><link>https://daemon365.dev/2023/12/07/%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8Bcontainerd-%E5%92%8C-runc/</link><pubDate>Thu, 07 Dec 2023 00:00:00 +0800</pubDate><guid>https://daemon365.dev/2023/12/07/%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8Bcontainerd-%E5%92%8C-runc/</guid><description>启动流程 containerd 作为一个 api 服务，提供了一系列的接口供外部调用，比如创建容器、删除容器、创建镜像、删除镜像等等。使用 docker 和 ctr 等工具，都是通过调用 containerd 的 api 来实现的。 kubelet 通过 cri 调用 containerd 和这些不一样，后续我会介绍到。 containerd 创建</description></item></channel></rss>