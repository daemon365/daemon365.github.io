<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Grpc on Daemon</title><link>https://daemon365.dev/tags/grpc/</link><description>Recent content in Grpc on Daemon</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 25 Dec 2022 00:00:00 +0800</lastBuildDate><atom:link href="https://daemon365.dev/tags/grpc/index.xml" rel="self" type="application/rss+xml"/><item><title>隔离</title><link>https://daemon365.dev/2022/12/25/%E9%9A%94%E7%A6%BB/</link><pubDate>Sun, 25 Dec 2022 00:00:00 +0800</pubDate><guid>https://daemon365.dev/2022/12/25/%E9%9A%94%E7%A6%BB/</guid><description>什么是隔离？ 隔离，本质上是对系统或资源进行分割，从而实现当系统发生故障时能限定传播范围和影响范围，即发生故障后只有出问题的服务不可用，保证其他服务仍然可用。 服务隔离 动静隔离 例如 CDN 小到 CPU 的 cacheline false shari</description></item><item><title>限流</title><link>https://daemon365.dev/2022/12/24/%E9%99%90%E6%B5%81/</link><pubDate>Sat, 24 Dec 2022 00:00:00 +0800</pubDate><guid>https://daemon365.dev/2022/12/24/%E9%99%90%E6%B5%81/</guid><description>令牌桶算法 是一个存放固定容量令牌的桶，按照固定速率往桶里添加令牌。令牌桶算法的描述如下： 假设限制2r/s，则按照500毫秒的固定速率往桶中添加令牌。 桶中最多存放 b 个令牌，当桶满时，新添加的令牌被丢弃或</description></item><item><title>超时控制</title><link>https://daemon365.dev/2022/12/23/%E8%B6%85%E6%97%B6%E6%8E%A7%E5%88%B6/</link><pubDate>Fri, 23 Dec 2022 00:00:00 +0800</pubDate><guid>https://daemon365.dev/2022/12/23/%E8%B6%85%E6%97%B6%E6%8E%A7%E5%88%B6/</guid><description>什么是超时控制？ 超时控制，使我们的服务之间调用可以快速抛错。比如API接口设置1s超时API调用A服务用了500ms，服务A调用和服务B用了600ms，n那么现在已经超时，还要调用服务C等等，再返回超</description></item><item><title>grpc服务发现与负载均衡</title><link>https://daemon365.dev/2020/12/20/grpc%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link><pubDate>Sun, 20 Dec 2020 00:00:00 +0800</pubDate><guid>https://daemon365.dev/2020/12/20/grpc%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid><description>前言 在后台服务开发中，高可用性是构建中核心且重要的一环。服务发现（Service discovery）和负载均衡（Load Balance）一直都是我关注的话题。今天来谈一下我在实际中是如何理解及落地的。</description></item><item><title>grpc基础</title><link>https://daemon365.dev/2020/12/10/grpc%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 10 Dec 2020 00:00:00 +0800</pubDate><guid>https://daemon365.dev/2020/12/10/grpc%E5%9F%BA%E7%A1%80/</guid><description>RPC 框架原理 RPC 框架的目标就是让远程服务调用更加简单、透明，RPC 框架负责屏蔽底层的传输方式（TCP 或者 UDP）、序列化方式（XML/Json/ 二进制）和通信细节。服务调用者可以像调用本地接口一样调用远程</description></item></channel></rss>