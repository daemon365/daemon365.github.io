<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis on Daemon</title><link>https://daemon365.dev/tags/redis/</link><description>Recent content in Redis on Daemon</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 20 Aug 2023 00:00:00 +0800</lastBuildDate><atom:link href="https://daemon365.dev/tags/redis/index.xml" rel="self" type="application/rss+xml"/><item><title>redis主从同步</title><link>https://daemon365.dev/2023/08/20/redis%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</link><pubDate>Sun, 20 Aug 2023 00:00:00 +0800</pubDate><guid>https://daemon365.dev/2023/08/20/redis%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</guid><description>redis主从同步 原理： 从服务器向主服务器发送 SYNC 命令。 接到 SYNC 命令的主服务器会调用BGSAVE 命令，创建一个 RDB 文件，并使用缓冲区记录接下来执行的所有写命令。 当主服务器执行完 BGSAVE 命令时，它会向从服务器发送 RDB</description></item><item><title>redis发布订阅</title><link>https://daemon365.dev/2022/08/20/redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</link><pubDate>Sat, 20 Aug 2022 00:00:00 +0800</pubDate><guid>https://daemon365.dev/2022/08/20/redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</guid><description>什么是发布和订阅 Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。 Redis 客户端可以订阅任意数量的频道。 发布和订阅 1、客户端可以订阅频道如下图 2、当给这个频道发布消息后，消息就会发送给订阅</description></item><item><title>分布式ID生成器及redis，etcd分布式锁</title><link>https://daemon365.dev/2021/04/30/%E5%88%86%E5%B8%83%E5%BC%8Fid%E7%94%9F%E6%88%90%E5%99%A8%E5%8F%8Aredisetcd%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link><pubDate>Fri, 30 Apr 2021 00:00:00 +0800</pubDate><guid>https://daemon365.dev/2021/04/30/%E5%88%86%E5%B8%83%E5%BC%8Fid%E7%94%9F%E6%88%90%E5%99%A8%E5%8F%8Aredisetcd%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid><description>分布式id生成器 有时我们需要能够生成类似MySQL自增ID这样不断增大，同时又不会重复的id。以支持业务中的高并发场景。比较典型的，电商促销时，短时间内会有大量的订单涌入到系统，比如每秒10w+。明星</description></item><item><title>redis持久化</title><link>https://daemon365.dev/2020/03/21/redis%E6%8C%81%E4%B9%85%E5%8C%96/</link><pubDate>Sat, 21 Mar 2020 00:00:00 +0800</pubDate><guid>https://daemon365.dev/2020/03/21/redis%E6%8C%81%E4%B9%85%E5%8C%96/</guid><description>Redis是一种内存型数据库，一旦服务器进程退出，数据库的数据就会丢失，为了解决这个问题，Redis提供了两种持久化的方案，将内存中的数据保存到磁盘中，避免数据的丢失。 RDB持久化 redis提供了RD</description></item><item><title>redis基础</title><link>https://daemon365.dev/2020/03/20/redis%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 20 Mar 2020 00:00:00 +0800</pubDate><guid>https://daemon365.dev/2020/03/20/redis%E5%9F%BA%E7%A1%80/</guid><description>redis介绍 Redis 是完全开源的，遵守 BSD 协议，是一个高性能的 key-value 数据库。 Redis 与其他 key - value 缓存产品有以下三个特点： Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Re</description></item><item><title>golang redis</title><link>https://daemon365.dev/2020/01/12/golang-redis/</link><pubDate>Sun, 12 Jan 2020 00:00:00 +0800</pubDate><guid>https://daemon365.dev/2020/01/12/golang-redis/</guid><description>安装 下载第三方包: go get -u github.com/go-redis/redis/v9 连接 // 定义一个rdis客户端 var redisdb *redis.Client // 初始化 func initClient() (err error) { redisdb = redis.NewClient(&amp;amp;redis.Options{ Addr: &amp;quot;localhost:6379&amp;quot;, // post端口 Password: &amp;quot;&amp;quot;, // 密码 DB: 0, // 使用redis的库 }) _, err = redisdb.Ping(context.Background()).Result() if err != nil { fmt.Println(&amp;quot;连接失败</description></item></channel></rss>